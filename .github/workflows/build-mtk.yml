name: Build mtkclient Windows EXE

on:
  workflow_dispatch:

jobs:
  build-mtk:
    runs-on: windows-latest

    steps:
      # (1) Checkout upstream mtkclient sources to freeze
      - name: Checkout mtkclient
        uses: actions/checkout@v4
        with:
          repository: bkerler/mtkclient

      # (2) Also checkout THIS repo (to grab your libusb DLL you uploaded)
      - name: Checkout this repo (for assets)
        uses: actions/checkout@v4
        with:
          path: self

      # (3) Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # (4) Deps for building
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      # (5) Install WinFSP on runner (needed by fuse)
      - name: Install WinFSP (for FUSE)
        shell: pwsh
        run: choco install winfsp -y

      # (6) Find the WinFSP DLL path (x64) on the runner
      - name: Locate WinFSP DLL path
        id: winfsp
        shell: pwsh
        run: |
          $candidates = @(
            'C:\Program Files\WinFsp\bin\winfsp-x64.dll',
            'C:\Program Files (x86)\WinFsp\bin\winfsp-x64.dll'
          )
          foreach ($p in $candidates) {
            if (Test-Path $p) {
              "path=$p" >> $env:GITHUB_OUTPUT
              exit 0
            }
          }
          throw "winfsp-x64.dll not found after choco install"

      # (7) Copy your known-good libusb into the mtkclient tree we freeze
      #     EXPECTED SOURCE in your repo: self\mtkclient\Library\Connection\bin\libusb-1.0.dll
      #     If yours sits elsewhere, change $src to that path.
      - name: Copy libusb into mtkclient
        shell: pwsh
        run: |
          $src = "$(Join-Path $env:GITHUB_WORKSPACE 'self\mtkclient\Library\Connection\bin\libusb-1.0.dll')"
          if (!(Test-Path $src)) { throw "libusb-1.0.dll not found at $src" }
          New-Item -ItemType Directory -Force -Path "mtkclient\Library\Connection\bin" | Out-Null
          Copy-Item $src "mtkclient\Library\Connection\bin\libusb-1.0.dll" -Force

      # (8) Build single-file mtk.exe and BUNDLE both DLLs.
      - name: Build mtk.exe (fully bundled)
        shell: pwsh
        run: |
          pyinstaller --onefile --console mtk.py --name mtk `
            --collect-binaries mtkclient `
            --collect-submodules mtkclient `
            --add-binary "${{ steps.winfsp.outputs.path }};mtkclient/Library/Filesystem/bin" `
            --add-binary "mtkclient/Library/Connection/bin/libusb-1.0.dll;mtkclient/Library/Connection/bin" `
            --hidden-import=fuse

      # (9) Publish artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mtk_win
          path: dist/mtk.exe
