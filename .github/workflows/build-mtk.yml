name: Build mtkclient Windows EXE

on:
  workflow_dispatch:

jobs:
  build-mtk:
    runs-on: windows-latest

    steps:
      # 1) Pull upstream mtkclient sources that we freeze
      - name: Checkout mtkclient
        uses: actions/checkout@v4
        with:
          repository: bkerler/mtkclient

      # 2) Python 3.11
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3) Deps for building
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      # 4) Install WinFSP on the runner (needed by fuse)
      - name: Install WinFSP (for FUSE)
        shell: pwsh
        run: choco install winfsp -y

      # 5) Find the actual WinFSP DLL path (x64, path can vary)
      - name: Locate WinFSP DLL path
        id: winfsp
        shell: pwsh
        run: |
          $candidates = @(
            'C:\Program Files\WinFsp\bin\winfsp-x64.dll',
            'C:\Program Files (x86)\WinFsp\bin\winfsp-x64.dll'
          )
          foreach ($p in $candidates) {
            if (Test-Path $p) {
              "path=$p" >> $env:GITHUB_OUTPUT
              exit 0
            }
          }
          throw "winfsp-x64.dll not found after choco install"

      # 6) Build the single-file mtk.exe (bundle DLLs automatically)
      - name: Build mtk.exe (fully bundled)
        shell: pwsh
        run: |
          pyinstaller --onefile --console mtk.py --name mtk `
            --collect-binaries mtkclient `
            --collect-submodules mtkclient `
            --add-binary "${{ steps.winfsp.outputs.path }};mtkclient/Library/Filesystem/bin" `
            --hidden-import=fuse

      # 7) Publish the exe
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mtk_win
          path: dist/mtk.exe
